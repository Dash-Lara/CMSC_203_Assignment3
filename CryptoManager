

/**
 * This is a utility class that encrypts and decrypts a phrase using two
 * different approaches. The first approach is called the Caesar Cipher and is a
 * simple �substitution cipher� where characters in a message are replaced by a
 * substitute character. The second approach, due to Giovan Battista Bellaso,
 * uses a key word, where each character in the word specifies the offset for
 * the corresponding character in the message, with the key word wrapping around
 * as needed.
 * 
 * @author Farnaz Eivazi
 * @version 7/16/2022
 */
public class CryptoManager {
	
	private static final char LOWER_RANGE = ' ';
	private static final char UPPER_RANGE = '_';
	private static final int RANGE = UPPER_RANGE - LOWER_RANGE + 1;

	/**
	 * This method determines if a string is within the allowable bounds of ASCII codes 
	 * according to the LOWER_RANGE and UPPER_RANGE characters
	 * @param plainText a string to be encrypted, if it is within the allowable bounds
	 * @return true if all characters are within the allowable bounds, false if any character is outside
	 */
	public static boolean isStringInBounds (String plainText) {
		//For loop to check each character individually
		for(int x = 0; x < plainText.length(); x++) {
			//If any character is out of bounds the method will return false
			if(plainText.charAt(x) > UPPER_RANGE || plainText.charAt(x) < LOWER_RANGE) {
				System.out.print("The selected string is not in bounds, Try again.");
				return false;
			}
		}
		//Method returns true if no characters are found out of bounds
		return true;
	}

	/**
	 * Encrypts a string according to the Caesar Cipher.  The integer key specifies an offset
	 * and each character in plainText is replaced by the character \"offset\" away from it 
	 * @param plainText an uppercase string to be encrypted.
	 * @param key an integer that specifies the offset of each character
	 * @return the encrypted string
	 */
	public static String caesarEncryption(String plainText, int key) {
		//String var to hold the string once its been encrypted
		String encrypted = "";
		//Temporary char var to hold each character as its being worked on
		char temp;
		
		//Only if the string is in bounds we will work on it
		 if(isStringInBounds(plainText)== true) {
			//For loop to work on each character individually
			for(int x = 0; x < plainText.length(); x++) {
				temp = 0; //temporary char var to hold the character while its being worked with. Reinitialized for every character
				temp += (char)(plainText.charAt(x) + key);//Adding the key onto the character and then putting the character into the temp var
				while(temp >= UPPER_RANGE) {
					temp -= RANGE;//If the key is greater than the upper range we subtract 64 until key is within bounds 
				}
				encrypted += temp;// Finally the character is added onto the string
			}
			
		}
	
		
		//The complete encrypted string is returned 
		return encrypted;
	}
	
	/**
	 * Encrypts a string according the Bellaso Cipher.  Each character in plainText is offset 
	 * according to the ASCII value of the corresponding character in bellasoStr, which is repeated
	 * to correspond to the length of plainText
	 * @param plainText an uppercase string to be encrypted.
	 * @param bellasoStr an uppercase string that specifies the offsets, character by character.
	 * @return the encrypted string
	 */
	public static String bellasoEncryption (String plainText, String bellasoStr) {
		int x = 0;//Increment variable
		char temp;//Temporary char var to hold the character as we work on it
		while(plainText.length() > bellasoStr.length()) {//While look to make bellasoStr longer if the plainText string is longer
			bellasoStr += bellasoStr.charAt(x%bellasoStr.length());//Adding onto the end of bellasoStr the characters that are at its beginning
			x++;//Incrementing the variable
		}
		String encrypted = "";//String to hold the encrypted string
		
		if(isStringInBounds(plainText)) {//We will only work on the character if the string is in bounds
			
			for(int i = 0; i < plainText.length(); i++) {//For loop to work on each character
				temp = (char)((plainText.charAt(i)) + (bellasoStr.charAt(i)));//Encrpyting the character and putting it in a temporary variable
				while(temp > UPPER_RANGE) {
					temp -= RANGE;//If the character is made out of range by the encryption algorithm then we sibtract from it until it is in range
				}
				encrypted += temp; //Adding the temp character onto encrypted
			}
			
		}
		return encrypted;//Returning the encrypted variable
	}
	
	/**
	 * Decrypts a string according to the Caesar Cipher.  The integer key specifies an offset
	 * and each character in encryptedText is replaced by the character \"offset\" characters before it.
	 * This is the inverse of the encryptCaesar method.
	 * @param encryptedText an encrypted string to be decrypted.
	 * @param key an integer that specifies the offset of each character
	 * @return the plain text string
	 */
	public static String caesarDecryption (String encryptedText, int key) {

		String decrypted = ""; //String var to hold the decrypted string
		char temp = 0;//Temp var to hold the character as we work on it
		
		for(int x = 0; x < encryptedText.length(); x++) {//For loop to work on each character individually
			temp += encryptedText.charAt(x) - key;//Decrpyting the character and putting it in a temporary variable

			while(key < LOWER_RANGE) {
				temp += RANGE;//If the character is lower than the lower range we subtract 64 until key is within bounds 
			}
			decrypted += (char)temp;//Adding the character onto the decrypted string
		}
		return decrypted;//Returning the string once its decrypted
	}
	
	/**
	 * Decrypts a string according the Bellaso Cipher.  Each character in encryptedText is replaced by
	 * the character corresponding to the character in bellasoStr, which is repeated
	 * to correspond to the length of plainText.  This is the inverse of the encryptBellaso method.
	 * @param encryptedText an uppercase string to be encrypted.
	 * @param bellasoStr an uppercase string that specifies the offsets, character by character.
	 * @return the decrypted string
	 */
	public static String bellasoDecryption(String encryptedText, String bellasoStr) {
		
		int x = 0;//Increment variable
		String decrypted = "";//String var to hold the decrypted string
		char temp; //Temp var to hold the character as we work on it
		while(encryptedText.length() < bellasoStr.length()) {
			bellasoStr += bellasoStr.charAt(x);
			x++;//Incrementing
		}
		for(int i = 0; i < encryptedText.length(); i++) {//For loop to work on each character individually
			temp = (char)(encryptedText.charAt(i) - (bellasoStr.charAt(i)));//Decrypting the character and putting it in temp
			while(temp < LOWER_RANGE) {
				temp += RANGE;//If the character is lower than the lower range we subtract 64 until key is within bounds
			}
			decrypted += (char)temp;//Adding the character onto the decrypted string
		}
		return decrypted;//Returning the string once its decrypted
	}
}


    
